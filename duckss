#include <iostream>
#include <string>
#include <vector>

class Duck {
public:
    void SetName(const std::string& name) {
        name_ = name;
    }

    void Fly(int distance) {
        total_distance_ += distance;  // Увеличиваем общую дистанцию для текущей утки

        std::cout << name_ << " flies " << distance << "km. Total flight distance is " 
                  << total_distance_ << "km." << std::endl;
    }

private:
    std::string name_;
    int total_distance_ = 0;  // Общая дистанция полета для текущей утки
};

int main() {
    int num_ducks;
    std::cin >> num_ducks;

    std::vector<Duck> ducks(num_ducks);  // Создаем вектор из num_ducks уток

    for (int i = 0; i < num_ducks; ++i) {
        std::string nam;
        std::cin >> nam;
        ducks[i].SetName(nam);  // Устанавливаем имя для каждой утки
    }

    int num_commands = 0;
    std::cin >> num_commands;

    for (int i = 0; i < num_commands; ++i) {
        int duck_number, distance;
        std::cin >> duck_number >> distance;
        if (duck_number >= 1 && duck_number <= num_ducks) {
            ducks[duck_number - 1].Fly(distance);  // Вызываем Fly для соответствующей утки
        } else {
            std::cout << "Invalid duck number: " << duck_number << std::endl;
        }
    }

    return 0;
}
